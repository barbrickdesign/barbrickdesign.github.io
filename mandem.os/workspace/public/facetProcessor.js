/**
 * Gem Bot Facet Processor
 * Processes facet diagrams and converts them to machine instructions
 * Mirrors physical faceting machine with X/Y axis control and automated movement
 */

class FacetProcessor {
  constructor() {
    this.designs = new Map();
    this.currentDesign = null;
    this.machineState = {
      dopStickPosition: { x: 0, y: 50, z: 0 }, // Y=50mm is raised position
      wheelPosition: { x: 0, y: 0, z: 0 },
      wheelRotation: 0,
      wheelSpeed: 0,
      currentLap: 'coarse', // coarse, medium, fine, polish
      cutProgress: 0,
      isRunning: false
    };
    
    // Lap colors representing different grits
    this.lapColors = {
      coarse: '#8B4513',   // Brown - 80 grit
      medium: '#A0522D',   // Sienna - 260 grit
      fine: '#CD853F',     // Peru - 600 grit
      prePolish: '#DEB887', // BurlyWood - 1200 grit
      polish: '#F5F5DC'    // Beige - 3000 grit / diamond polish
    };
    
    this.lapGrits = {
      coarse: 80,
      medium: 260,
      fine: 600,
      prePolish: 1200,
      polish: 3000
    };
    
    this.init();
  }
  
  init() {
    this.loadDefaultDesigns();
    console.log('[FacetProcessor] Initialized with', this.designs.size, 'designs');
  }
  
  loadDefaultDesigns() {
    // Standard Brilliant Cut
    this.designs.set('brilliant', {
      name: 'Standard Brilliant Cut',
      facets: [
        // Pavilion (bottom)
        { angle: 40.75, index: 96, cut: 'pavilion_main', lap: 'coarse' },
        { angle: 40.75, index: 48, cut: 'pavilion_main', lap: 'coarse' },
        { angle: 43.00, index: 72, cut: 'pavilion_lower', lap: 'medium' },
        { angle: 43.00, index: 24, cut: 'pavilion_lower', lap: 'medium' },
        // Crown (top)
        { angle: 34.50, index: 96, cut: 'crown_main', lap: 'fine' },
        { angle: 34.50, index: 48, cut: 'crown_main', lap: 'fine' },
        { angle: 41.00, index: 72, cut: 'star_facet', lap: 'prePolish' },
        { angle: 27.50, index: 84, cut: 'upper_girdle', lap: 'prePolish' },
        // Table
        { angle: 0, index: 0, cut: 'table', lap: 'polish' }
      ],
      gemType: 'diamond',
      estimatedTime: 45 // minutes
    });
    
    // Emerald Cut
    this.designs.set('emerald', {
      name: 'Emerald Step Cut',
      facets: [
        { angle: 43.00, index: 90, cut: 'pavilion_step1', lap: 'coarse' },
        { angle: 41.00, index: 90, cut: 'pavilion_step2', lap: 'medium' },
        { angle: 39.00, index: 90, cut: 'pavilion_step3', lap: 'medium' },
        { angle: 35.00, index: 90, cut: 'crown_step1', lap: 'fine' },
        { angle: 30.00, index: 90, cut: 'crown_step2', lap: 'prePolish' },
        { angle: 0, index: 0, cut: 'table', lap: 'polish' }
      ],
      gemType: 'emerald',
      estimatedTime: 30
    });
    
    // Princess Cut
    this.designs.set('princess', {
      name: 'Princess Cut',
      facets: [
        { angle: 42.00, index: 90, cut: 'pavilion_main', lap: 'coarse' },
        { angle: 42.00, index: 45, cut: 'pavilion_corner', lap: 'coarse' },
        { angle: 36.00, index: 90, cut: 'crown_main', lap: 'fine' },
        { angle: 36.00, index: 45, cut: 'crown_corner', lap: 'fine' },
        { angle: 0, index: 0, cut: 'table', lap: 'polish' }
      ],
      gemType: 'various',
      estimatedTime: 35
    });
  }
  
  // Load design from user or default library
  loadDesign(designKey) {
    if (this.designs.has(designKey)) {
      this.currentDesign = this.designs.get(designKey);
      console.log('[FacetProcessor] Loaded design:', this.currentDesign.name);
      return this.currentDesign;
    }
    return null;
  }
  
  // Create custom design
  createCustomDesign(name, facets, gemType) {
    const designKey = name.toLowerCase().replace(/\s+/g, '_');
    this.designs.set(designKey, {
      name: name,
      facets: facets,
      gemType: gemType,
      estimatedTime: Math.ceil(facets.length * 2.5),
      custom: true
    });
    return designKey;
  }
  
  // Generate G-code for CNC faceting machine
  generateGCode(design) {
    if (!design) design = this.currentDesign;
    if (!design) return null;
    
    let gcode = [];
    gcode.push('; Faceting G-Code Generated by Gem Bot');
    gcode.push('; Design: ' + design.name);
    gcode.push('; Gem Type: ' + design.gemType);
    gcode.push('G21 ; Set units to millimeters');
    gcode.push('G90 ; Absolute positioning');
    gcode.push('G28 ; Home all axes');
    gcode.push('');
    
    let facetNum = 1;
    for (const facet of design.facets) {
      gcode.push(`; Facet ${facetNum}: ${facet.cut} at ${facet.angle}째 / ${facet.index} index`);
      gcode.push(`; Lap: ${facet.lap} (${this.lapGrits[facet.lap]} grit)`);
      
      // Move to safe Z height
      gcode.push('G0 Z50 ; Raise dop stick');
      
      // Rotate to index position
      gcode.push(`G0 A${facet.index} ; Rotate to index ${facet.index}`);
      
      // Set angle
      gcode.push(`G0 B${facet.angle} ; Set angle to ${facet.angle}째`);
      
      // Change lap if needed
      gcode.push(`M6 T${this.getLapToolNumber(facet.lap)} ; Change to ${facet.lap} lap`);
      
      // Start wheel rotation
      gcode.push('M3 S1500 ; Start wheel at 1500 RPM');
      
      // Lower to cutting depth (approach slowly)
      gcode.push('G1 Z10 F100 ; Lower to approach height');
      gcode.push('G1 Z0 F20 ; Lower to cutting depth slowly');
      
      // Cutting pass
      gcode.push('G4 P2 ; Dwell 2 seconds for cutting');
      
      // Retract
      gcode.push('G0 Z50 ; Raise dop stick');
      gcode.push('');
      
      facetNum++;
    }
    
    gcode.push('; Final polish');
    gcode.push('M5 ; Stop wheel');
    gcode.push('G28 ; Return home');
    gcode.push('M30 ; Program end');
    
    return gcode.join('\n');
  }
  
  getLapToolNumber(lapType) {
    const toolMap = {
      coarse: 1,
      medium: 2,
      fine: 3,
      prePolish: 4,
      polish: 5
    };
    return toolMap[lapType] || 1;
  }
  
  // Simulate cutting process (returns animation frames)
  simulateCutting(design, onProgress) {
    if (!design) design = this.currentDesign;
    if (!design) return;
    
    this.machineState.isRunning = true;
    this.machineState.cutProgress = 0;
    
    const totalFacets = design.facets.length;
    let currentFacet = 0;
    
    const cutInterval = setInterval(() => {
      if (currentFacet >= totalFacets) {
        clearInterval(cutInterval);
        this.machineState.isRunning = false;
        this.machineState.cutProgress = 100;
        if (onProgress) onProgress(100, 'complete');
        return;
      }
      
      const facet = design.facets[currentFacet];
      this.machineState.currentLap = facet.lap;
      this.machineState.cutProgress = ((currentFacet + 1) / totalFacets) * 100;
      
      // Update machine position to simulate cutting
      this.moveDopStick(facet.index, facet.angle);
      
      if (onProgress) {
        onProgress(this.machineState.cutProgress, facet.cut, facet.lap);
      }
      
      currentFacet++;
    }, 1000); // 1 second per facet for simulation
    
    return cutInterval;
  }
  
  // Move dop stick to position (X/Y axis control)
  moveDopStick(indexAngle, cutAngle, distance = 0) {
    // Convert index angle to X position
    const angleRad = (indexAngle * Math.PI) / 180;
    this.machineState.dopStickPosition.x = Math.sin(angleRad) * 30; // 30mm radius
    this.machineState.dopStickPosition.z = Math.cos(angleRad) * 30;
    
    // Y axis controls height (distance to wheel)
    // Y=0 is touching wheel, Y=50 is raised
    this.machineState.dopStickPosition.y = distance;
    
    console.log(`[FacetProcessor] Dop stick moved to X:${this.machineState.dopStickPosition.x.toFixed(2)}, Y:${this.machineState.dopStickPosition.y.toFixed(2)}, Index:${indexAngle}째, Cut:${cutAngle}째`);
    
    return this.machineState.dopStickPosition;
  }
  
  // Get current lap color for visualization
  getCurrentLapColor() {
    return this.lapColors[this.machineState.currentLap] || '#888888';
  }
  
  // Export design as JSON
  exportDesign(designKey) {
    const design = this.designs.get(designKey);
    if (design) {
      return JSON.stringify(design, null, 2);
    }
    return null;
  }
  
  // Import design from JSON
  importDesign(jsonString) {
    try {
      const design = JSON.parse(jsonString);
      const key = design.name.toLowerCase().replace(/\s+/g, '_');
      this.designs.set(key, design);
      return key;
    } catch (e) {
      console.error('[FacetProcessor] Import failed:', e);
      return null;
    }
  }
  
  // Get all available designs
  getDesignList() {
    return Array.from(this.designs.entries()).map(([key, design]) => ({
      key: key,
      name: design.name,
      facetCount: design.facets.length,
      gemType: design.gemType,
      estimatedTime: design.estimatedTime,
      custom: design.custom || false
    }));
  }
  
  // Manual control: move X axis
  moveX(distance) {
    this.machineState.dopStickPosition.x += distance;
    return this.machineState.dopStickPosition;
  }
  
  // Manual control: move Y axis (raise/lower)
  moveY(distance) {
    this.machineState.dopStickPosition.y = Math.max(0, Math.min(50, this.machineState.dopStickPosition.y + distance));
    return this.machineState.dopStickPosition;
  }
  
  // Manual control: rotate index
  rotateIndex(angle) {
    this.machineState.wheelRotation = (this.machineState.wheelRotation + angle) % 360;
    return this.machineState.wheelRotation;
  }
  
  // Get machine state for UI display
  getMachineState() {
    return { ...this.machineState };
  }
}

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = FacetProcessor;
} else {
  window.FacetProcessor = FacetProcessor;
}
